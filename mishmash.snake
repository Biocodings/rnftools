import time
import re

##################################
#    TODO
# - randomization
# - color space
# - downloading FASTA files
# - random generators seeds
#
#


include: "snakemake-lib/include_all.snake.py"

def single_fq_fn(name,source_id):
	return "{name}/{name}.source_{source_id}.fq".format(
			name=name,
			source_id=source_id
		)

def joined_fq_fn(name):
	return "{}.joined.fq".format(name)

def _source_from_fastq_part(wildcards):
	return \
		[_MISHMASH_SOURCES_[int(wildcards.source_id)].get_input_fa()] + \
		[_MISHMASH_SOURCES_[int(wildcards.source_id)].get_input_fa()+".fai"] + \
		_MISHMASH_SOURCES_[int(wildcards.source_id)].get_input_progs()


def input_from_fastq_part(wildcards):
	# todo: faidx
	return \
			_source_from_fastq_part(wildcards).get_input_progs() + \
			[_source_from_fastq_part(wildcards).get_input_fa()]

def output_from_fastq_part(name,source_id):
	return [
			_source_from_fastq_part(wildcards).get_input_progs(),
			_source_from_fastq_part(wildcards).get_input_fa()
		]


rule joined_fq:
	input:
		[_MISHMASH_SOURCES_[key].get_output_fq() for key in _MISHMASH_SOURCES_.keys()]
	output:
		joined_fq_fn("{name}")
	run:
		shell("cat /dev/null > {output[0]}")
		for i in range(len(input)):
			print(input[i])
			shell("cat " + input[i] + " >> {output[0]}")


rule one_source:
	output:		
		single_fq_fn("{name}","{source_id}")
		#dynamic("{anyfile}.cluster.csv")
	input:
		_source_from_fastq_part
	run:
		_MISHMASH_SOURCES_[int(wildcards.source_id)].run()
